name: Build Docker Image from External Repo

on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 0 * * *"

jobs:
  build-push:
    name: Build and push Docker image to GitHub Container registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Get tdlib ref
        uses: octokit/request-action@v2.x
        id: get-tdlib-ref
        with:
          route: GET /repos/tdlib/td/branches/master
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Cache tdlib
        id: cache-tdlib
        uses: actions/cache@v4
        with:
          path: tdlib
          key: tdlib-${{fromJson(steps.get-tdlib-ref.outputs.data).commit.sha}}

      - name: Checkout tdlib
        if: steps.cache-tdlib.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{fromJson(steps.get-tdlib-ref.outputs.data).commit.sha}}
          repository: tdlib/td
          token: ${{secrets.GITHUB_TOKEN}}
          path: tdlib

      - name: Setup variables
        id: setup-vars
        if: steps.cache-tdlib.outputs.cache-hit != 'true' || github.event_name!='schedule'
        run: |
          LATEST_COMMIT=${{fromJson(steps.get-tdlib-ref.outputs.data).commit.sha}}
          LATEST_COMMIT_SHORT=${LATEST_COMMIT:0:7}
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "LATEST_COMMIT_SHORT=$LATEST_COMMIT_SHORT" >> $GITHUB_OUTPUT

      - uses: docker/metadata-action@v5
        id: metadata
        if: steps.cache-tdlib.outputs.cache-hit != 'true' || github.event_name!='schedule'
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ steps.setup-vars.outputs.LATEST_COMMIT_SHORT }}-alpine
            type=ref,event=branch
          labels: |
            org.opencontainers.image.ref.name=${{ steps.setup-vars.outputs.LATEST_COMMIT }}
            org.opencontainers.image.authors=${{ github.triggering_actor }}

      - name: Login to GitHub Container registry
        if: steps.cache-tdlib.outputs.cache-hit != 'true' || github.event_name!='schedule'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        if: steps.cache-tdlib.outputs.cache-hit != 'true' || github.event_name!='schedule'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.cache-tdlib.outputs.cache-hit != 'true' || github.event_name!='schedule'
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        if: steps.cache-tdlib.outputs.cache-hit != 'true' || github.event_name!='schedule'
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          context: ${{ inputs.context }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository }}:buildcache-alpine-main
          cache-to: |
            type=registry,ref=ghcr.io/${{ github.repository }}:buildcache-alpine-main,mode=max
          build-args: | 
            TD_COMMIT=${{ steps.setup-vars.outputs.LATEST_COMMIT }}
